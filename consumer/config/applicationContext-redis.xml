<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:redis="http://www.springframework.org/schema/redis"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/redis
        http://www.springframework.org/schema/redis/spring-redis.xsd
       http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd">
    <lang:groovy id="org.springframework.data.redis.connection.lettuce.LettucePoolingClient">
        <lang:inline-script>
            <![CDATA[
            def environment = top.cardone.context.ApplicationContextHolder.applicationContext.environment

            def genericObjectPoolConfig = new org.apache.commons.pool2.impl.GenericObjectPoolConfig(
                    maxTotal: environment.getProperty("spring.redis.lettuce.pool.max-total", Integer.class, 16),
                    maxIdle: environment.getProperty("spring.redis.lettuce.pool.max-idle", Integer.class, 16),
                    minIdle: environment.getProperty("spring.redis.lettuce.pool.min-idle", Integer.class, 0)
            )

            org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration.builder().
                    poolConfig(genericObjectPoolConfig).build()
            ]]>
        </lang:inline-script>
    </lang:groovy>

    <bean id="lettuceConnectionFactory"
          class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory" lazy-init="true">
        <constructor-arg>
            <bean class="org.springframework.data.redis.connection.RedisClusterConfiguration">
                <constructor-arg>
                    <bean class="org.springframework.core.env.MapPropertySource">
                        <constructor-arg>
                            <value>RedisClusterConfiguration</value>
                        </constructor-arg>
                        <constructor-arg>
                            <map>
                                <entry key="spring.redis.cluster.nodes"
                                       value="${spring.redis.cluster.nodes:127.0.0.1:7000,127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005}"/>
                                <entry key="spring.redis.cluster.timeout" value="${spring.redis.cluster.timeout:6000}"/>
                                <entry key="spring.redis.cluster.max-redirects"
                                       value="${spring.redis.cluster.max-redirects:3}"/>
                            </map>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg ref="org.springframework.data.redis.connection.lettuce.LettucePoolingClient"/>
    </bean>

    <bean id="org.springframework.data.redis.core.RedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate" lazy-init="true">
        <property name="connectionFactory" ref="lettuceConnectionFactory"/>
        <property name="defaultSerializer">
           <bean class="top.cardone.cache.serializer.FstRedisSerializer"/>
        </property>
    </bean>

    <bean id="redisPubAction" class="top.cardone.cache.action.RedisPubAction" lazy-init="true">
        <property name="redisTemplate" ref="org.springframework.data.redis.core.RedisTemplate"/>
        <property name="channel" value="topic:cache"/>
    </bean>

    <bean id="redisTopicMessageListener" class="top.cardone.cache.listener.RedisTopicMessageListener">
        <property name="redisTemplate" ref="org.springframework.data.redis.core.RedisTemplate"/>
    </bean>

    <redis:listener-container connection-factory="lettuceConnectionFactory">
        <redis:listener ref="redisTopicMessageListener" topic="topic:cache"/>
    </redis:listener-container>
</beans>